<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:java="http://www.yworks.com/xml/yfiles-common/1.0/java" xmlns:sys="http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0" xmlns:x="http://www.yworks.com/xml/yfiles-common/markup/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yEd 3.21.1-->
  <key attr.name="Beschreibung" attr.type="string" for="graph" id="d0"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key for="graphml" id="d7" yfiles.type="resources"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
    <data key="d0"/>
    <node id="n0">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="161.84756437304623" x="0.0" y="-4422.958134920635"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="161.84756437304623" x="4.0" xml:space="preserve" y="-0.06640625">Javascript</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n1">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="70.0" x="181.84756437304623" y="-4422.958134920635"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="70.0" x="4.0" xml:space="preserve" y="-0.06640625">Praxis</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n2">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="231.0" x="271.8475643730462" y="-4422.958134920635"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="231.0" x="4.0" xml:space="preserve" y="-0.06640625">1. Grundlagen und DOM-Interaktion</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n3">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="223.61215988224444" x="522.8475643730462" y="-4422.958134920635"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="223.61215988224444" x="4.0" xml:space="preserve" y="-0.06640625">DOM-Struktur und Manipulation</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n4">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="165.3212585551493" width="600.0" x="1053.4597242552907" y="-2606.7991213410664"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="161.4609375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.9301605275745715">25. Barrierefreiheit mit ARIA-Attributen verbessern
Bad Practice: Fehlende ARIA-Rollen bei interaktiven Elementen

&lt;div onclick="toggleMenu()"&gt;Menü&lt;/div&gt;

❌ Screenreader erkennen es nicht als interaktives Element.
Best Practice: ARIA-Attribute nutzen

&lt;button aria-expanded="false" onclick="toggleMenu()"&gt;Menü&lt;/button&gt;

✅ Verbessert die Zugänglichkeit für Menschen mit Screenreadern.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n5">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="24.013302599272947" width="600.0" x="1673.4597242552907" y="-2536.145143363128"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.94024504963636">&lt;button aria-expanded="false" onclick="toggleMenu()"&gt;Menü&lt;/button&gt;</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n6">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="227.22307507889212" width="600.0" x="1053.4597242552907" y="-2057.124632777541"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="217.9921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.61544378944609">27. DOM-Level 2 &amp; 3 Events
DOM-Level 0 (Veraltet, Bad Practice)

element.onclick = function() {
    alert("Klick!");
};

❌ Erlaubt nur einen Event-Listener pro Element.
DOM-Level 2 (Best Practice)

element.addEventListener("click", () =&gt; {
    alert("Klick!");
});

✅ Erlaubt mehrere Listener pro Event.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n7">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="55.452196537033615" width="600.0" x="1673.4597242552907" y="-1971.239193506612"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.5268795185168074">element.addEventListener("click", () =&gt; {
    alert("Klick!");
});</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n8">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="185.39003246008377" width="600.0" x="1053.4597242552907" y="-3164.008508293534"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="175.59375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.8981412300418015">23. focus() für besseres Accessibility (A11Y)
Bad Practice: Fehlende Fokus-Steuerung bei Modalen

document.querySelector("#modal").style.display = "block";

❌ Nutzer mit Tastatur-Navigation können das Element nicht fokussieren.
Best Practice: focus() verwenden

document.querySelector("#modal").style.display = "block";
document.querySelector("#modal").focus();

✅ Erhöht die Zugänglichkeit und Benutzerfreundlichkeit.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n9">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="311.8191930364432" width="600.0" x="1053.4597242552907" y="-2948.6183266769517"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="302.7890625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.515065268221406">24. Effiziente Entfernung von Event-Listenern mit AbortController
Bad Practice: removeEventListener() mit separater Funktion

function onClick() {
    console.log("Geklickt!");
}
document.addEventListener("click", onClick);
document.removeEventListener("click", onClick);

❌ Kann unübersichtlich werden, wenn viele Event-Listener verwaltet werden müssen.
Best Practice: AbortController nutzen

const controller = new AbortController();
document.addEventListener("click", () =&gt; {
    console.log("Geklickt!");
}, { signal: controller.signal });

// Später entfernen:
controller.abort();

✅ Entfernt alle zugehörigen Event-Listener auf einmal.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n10">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="110.04156226596706" width="600.0" x="1673.4597242552907" y="-2847.7295112917145"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="104.9296875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.555937382983757">const controller = new AbortController();
document.addEventListener("click", () =&gt; {
    console.log("Geklickt!");
}, { signal: controller.signal });

// Später entfernen:
controller.abort();</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n11">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="324.3525565538345" width="600.0" x="1053.4597242552907" y="-2411.477468753108"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="316.921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.715340776917401">26. documentFragment für Batch-DOM-Updates
Bad Practice: Viele direkte appendChild()-Aufrufe

const list = document.querySelector("ul");
for (let i = 0; i &lt; 1000; i++) {
    const li = document.createElement("li");
    li.textContent = `Item ${i}`;
    list.appendChild(li); 
}

❌ Jeder appendChild() löst ein Reflow aus → schlechte Performance.
Best Practice: documentFragment nutzen

const fragment = document.createDocumentFragment();
for (let i = 0; i &lt; 1000; i++) {
    const li = document.createElement("li");
    li.textContent = `Item ${i}`;
    fragment.appendChild(li);
}
document.querySelector("ul").appendChild(fragment);

✅ Fügt alle Elemente auf einmal ein → vermeidet unnötige Reflows.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n12">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="110.04156226596683" width="600.0" x="1673.4597242552907" y="-2304.321971609174"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="104.9296875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.555937382983302">const fragment = document.createDocumentFragment();
for (let i = 0; i &lt; 1000; i++) {
    const li = document.createElement("li");
    li.textContent = `Item ${i}`;
    fragment.appendChild(li);
}
document.querySelector("ul").appendChild(fragment);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n13">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="227.22307507889212" width="600.0" x="1053.4597242552907" y="-1799.9012200791287"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="217.9921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.61544378944609">28. DOM-Parser zum Erstellen von HTML aus Strings
Bad Practice: innerHTML zum Parsen von HTML nutzen

const div = document.createElement("div");
div.innerHTML = "&lt;p&gt;Neuer Inhalt&lt;/p&gt;";
document.body.appendChild(div);

❌ Erhöht das XSS-Risiko.
Best Practice: DOMParser verwenden

const parser = new DOMParser();
const doc = parser.parseFromString("&lt;p&gt;Neuer Inhalt&lt;/p&gt;", "text/html");
document.body.appendChild(doc.body.firstChild);

✅ Sicherer, weil es nicht direkt innerHTML verwendet.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n14">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="55.452196537033615" width="600.0" x="1673.4597242552907" y="-1714.0157808081995"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.5268795185168074">const parser = new DOMParser();
const doc = parser.parseFromString("&lt;p&gt;Neuer Inhalt&lt;/p&gt;", "text/html");
document.body.appendChild(doc.body.firstChild);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n15">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="337.7247065732276" width="600.0" x="1053.4597242552907" y="-1160.5536231278836"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="331.0546875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.335009536613825">31. slot-Element in Web Components
Best Practice: Inhalt von außen einfügen

&lt;custom-card&gt;
    &lt;span slot="title"&gt;Mein Titel&lt;/span&gt;
&lt;/custom-card&gt;

class CustomCard extends HTMLElement {
    constructor() {
        super();
        const shadow = this.attachShadow({ mode: "open" });
        shadow.innerHTML = `
            &lt;style&gt; .card { border: 1px solid; padding: 10px; } &lt;/style&gt;
            &lt;div class="card"&gt;
                &lt;h2&gt;&lt;slot name="title"&gt;&lt;/slot&gt;&lt;/h2&gt;
                &lt;p&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/p&gt;
            &lt;/div&gt;
        `;
    }
}
customElements.define("custom-card", CustomCard);

✅ slot ermöglicht flexible Inhalte für Web Components.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n16">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="260.73869284673367" width="600.0" x="1673.4597242552907" y="-1122.0606162646366"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="260.390625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.17403392336677825">&lt;custom-card&gt;
    &lt;span slot="title"&gt;Mein Titel&lt;/span&gt;
&lt;/custom-card&gt;

class CustomCard extends HTMLElement {
    constructor() {
        super();
        const shadow = this.attachShadow({ mode: "open" });
        shadow.innerHTML = `
            &lt;style&gt; .card { border: 1px solid; padding: 10px; } &lt;/style&gt;
            &lt;div class="card"&gt;
                &lt;h2&gt;&lt;slot name="title"&gt;&lt;/slot&gt;&lt;/h2&gt;
                &lt;p&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/p&gt;
            &lt;/div&gt;
        `;
    }
}
customElements.define("custom-card", CustomCard);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n17">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="166.50590395632094" width="600.0" x="1053.4597242552907" y="-792.8287456289542"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="161.4609375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.5224832281604677">32. CustomEvent für eigene Events
Best Practice: Eigene DOM-Events erstellen

const event = new CustomEvent("userAction", { detail: { userId: 123 } });
document.dispatchEvent(event);

document.addEventListener("userAction", (e) =&gt; {
    console.log("Benutzeraktion:", e.detail);
});

✅ Ermöglicht benutzerdefinierte Events für lose gekoppelte Architekturen.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n18">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="95.91290610137685" width="600.0" x="1673.4597242552907" y="-757.5322467014821"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="90.796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.558015550688424">const event = new CustomEvent("userAction", { detail: { userId: 123 } });
document.dispatchEvent(event);

document.addEventListener("userAction", (e) =&gt; {
    console.log("Benutzeraktion:", e.detail);
});</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n19">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="148.0061772521217" width="600.0" x="1053.4597242552907" y="-1542.6780886260608"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="133.1953125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="7.405432376060844">29. Range API für komplexe DOM-Manipulationen
Best Practice: Range statt innerHTML verwenden

const range = document.createRange();
range.selectNodeContents(document.body);
const frag = range.createContextualFragment("&lt;p&gt;Hallo Welt&lt;/p&gt;");
document.body.appendChild(frag);

✅ Erlaubt sicheres und schnelles Einfügen von HTML.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n20">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="65.16192100657895" width="600.0" x="1673.4597242552907" y="-1501.2559605032898"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="62.53125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.3153355032895888">const range = document.createRange();
range.selectNodeContents(document.body);
const frag = range.createContextualFragment("&lt;p&gt;Hallo Welt&lt;/p&gt;");
document.body.appendChild(frag);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n21">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="174.11771335993075" width="600.0" x="1053.4597242552907" y="-1364.6715550926638"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="161.4609375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.328387929965402">30. MutationRecord für präzise DOM-Überwachung
Best Practice: Änderungen am DOM genau protokollieren

const observer = new MutationObserver(mutations =&gt; {
    mutations.forEach(mutation =&gt; {
        console.log("Änderung erkannt:", mutation);
    });
});
observer.observe(document.body, { attributes: true, childList: true, subtree: true });

✅ Überwacht DOM-Änderungen ohne Polling.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n22">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="95.91290610137685" width="600.0" x="1673.4597242552907" y="-1325.5691514633868"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="90.796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.558015550688424">const observer = new MutationObserver(mutations =&gt; {
    mutations.forEach(mutation =&gt; {
        console.log("Änderung erkannt:", mutation);
    });
});
observer.observe(document.body, { attributes: true, childList: true, subtree: true });</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n23">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="292.96448735884803" width="600.0" x="1053.4597242552907" y="-4386.745735742916"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="260.390625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="16.286931179423846">19. Resize Observer für dynamische Layout-Anpassungen
Bad Practice: resize-Event am window-Objekt verwenden

window.addEventListener("resize", () =&gt; {
    console.log("Fenstergröße geändert!");
});

❌ Wird bei jeder Pixelveränderung aufgerufen, kann die Performance verschlechtern.
Best Practice: Resize Observer verwenden

const resizeObserver = new ResizeObserver(entries =&gt; {
    entries.forEach(entry =&gt; {
        console.log("Größe geändert:", entry.contentRect.width, entry.contentRect.height);
    });
});
resizeObserver.observe(document.querySelector("#resize-target"));

✅ Erkennt nur relevante Änderungen und ist ressourcenschonender.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n24">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="101.63360175988305" width="600.0" x="1673.4597242552907" y="-4291.080292943433"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="90.796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.418363379941184">const resizeObserver = new ResizeObserver(entries =&gt; {
    entries.forEach(entry =&gt; {
        console.log("Größe geändert:", entry.contentRect.width, entry.contentRect.height);
    });
});
resizeObserver.observe(document.querySelector("#resize-target"));</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n25">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="337.81389217730447" width="600.0" x="1053.4597242552907" y="-4063.7811524378585"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="316.921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="10.446008588652148">20. Einfache Animationen mit der Web Animations API (WAAPI)
Bad Practice: setInterval für Animationen nutzen

let pos = 0;
setInterval(() =&gt; {
    pos += 5;
    document.querySelector("#box").style.transform = `translateX(${pos}px)`;
}, 16);

❌ Blockiert den Haupt-Thread und ist ineffizient.
Best Practice: Web Animations API nutzen

document.querySelector("#box").animate([
    { transform: "translateX(0px)" },
    { transform: "translateX(300px)" }
], {
    duration: 1000,
    iterations: 1,
    fill: "forwards"
});

✅ Animiert direkt auf der GPU und ist wesentlich effizienter.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n26">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="123.98715229220852" width="600.0" x="1673.4597242552907" y="-3956.8677824953106"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="119.0625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.4623261461042603">document.querySelector("#box").animate([
    { transform: "translateX(0px)" },
    { transform: "translateX(300px)" }
], {
    duration: 1000,
    iterations: 1,
    fill: "forwards"
});</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n27">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="263.67310882780504" width="600.0" x="1053.4597242552907" y="-5048.232982985331"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="246.2578125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="8.707648163902377">17. Web Components für wiederverwendbare UI-Elemente
Best Practice: Eigenes HTML-Element mit Web Components erstellen

class MyButton extends HTMLElement {
    constructor() {
        super();
        const shadow = this.attachShadow({ mode: "open" });
        const button = document.createElement("button");
        button.textContent = this.getAttribute("label") || "Default";
        shadow.appendChild(button);
    }
}
customElements.define("my-button", MyButton);

&lt;my-button label="Klick mich"&gt;&lt;/my-button&gt;

✅ Ermöglicht das Erstellen wiederverwendbarer UI-Elemente mit Shadow DOM.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n28">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="186.24217462173772" width="600.0" x="1673.4597242552907" y="-5009.517515882297"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="175.59375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.324212310868461">class MyButton extends HTMLElement {
    constructor() {
        super();
        const shadow = this.attachShadow({ mode: "open" });
        const button = document.createElement("button");
        button.textContent = this.getAttribute("label") || "Default";
        shadow.appendChild(button);
    }
}
customElements.define("my-button", MyButton);

&lt;my-button label="Klick mich"&gt;&lt;/my-button&gt;</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n29">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="337.81389217730475" width="600.0" x="1053.4597242552907" y="-4754.5597238664295"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="331.0546875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.3796023386521483">18. Intersection Observer für effiziente Scroll-Events
Bad Practice: scroll-Event für Lazy Loading nutzen

window.addEventListener("scroll", () =&gt; {
    if (window.scrollY + window.innerHeight &gt;= document.body.offsetHeight) {
        console.log("Lade neue Inhalte...");
    }
});

❌ Wird bei jeder kleinen Scroll-Bewegung aufgerufen und kann Performance-Probleme verursachen.
Best Practice: Intersection Observer nutzen

const observer = new IntersectionObserver((entries) =&gt; {
    entries.forEach(entry =&gt; {
        if (entry.isIntersecting) {
            console.log("Element ist sichtbar!");
        }
    });
}, { threshold: 0.5 });

observer.observe(document.querySelector("#target"));

✅ Beobachtet nur relevante Änderungen und ist effizienter als das scroll-Event.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n30">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="140.59627560236606" width="600.0" x="1673.4597242552907" y="-4655.95091557896"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="133.1953125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.7004815511827474">const observer = new IntersectionObserver((entries) =&gt; {
    entries.forEach(entry =&gt; {
        if (entry.isIntersecting) {
            console.log("Element ist sichtbar!");
        }
    });
}, { threshold: 0.5 });

observer.observe(document.querySelector("#target"));</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n31">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="203.16780985422446" width="600.0" x="1053.4597242552907" y="-3695.9672382604454"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="175.59375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="13.787029927112144">21. ContentEditable für Inline-Editing
Bad Practice: prompt() für Benutzereingaben

const text = prompt("Gib einen neuen Text ein:");
document.querySelector("#editable").textContent = text;

❌ Unflexibel und nicht benutzerfreundlich.
Best Practice: contenteditable nutzen

&lt;div id="editable" contenteditable="true"&gt;Klicke hier zum Bearbeiten&lt;/div&gt;

✅ Bietet ein nahtloses Inline-Editing-Erlebnis.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n32">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="24.013302599272947" width="600.0" x="1673.4597242552907" y="-3606.3899846329696"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.94024504963636">&lt;div id="editable" contenteditable="true"&gt;Klicke hier zum Bearbeiten&lt;/div&gt;</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n33">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="268.7905464357754" width="600.0" x="1053.4597242552907" y="-3462.799241471856"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="260.390625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.199960717887734">22. requestFullscreen() für Vollbild-Modus
Bad Practice: Manuelles CSS für Vollbild setzen

.fullscreen {
    width: 100vw;
    height: 100vh;
}

document.querySelector("#box").classList.add("fullscreen");

❌ Funktioniert nicht für echte Vollbild-Anwendungen.
Best Practice: requestFullscreen() nutzen

document.querySelector("#box").addEventListener("click", function () {
    this.requestFullscreen();
});

✅ Ermöglicht einen echten Vollbildmodus, der mit Escape beendet werden kann.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n34">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="49.37765444769161" width="600.0" x="1673.4597242552907" y="-3353.092795477814"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.48960847384569206">document.querySelector("#box").addEventListener("click", function () {
    this.requestFullscreen();
});</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n35">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="40.208679662460554" width="600.0" x="1673.4597242552907" y="-3091.4178318947224"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="34.265625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.9715273312303907">document.querySelector("#modal").style.display = "block";
document.querySelector("#modal").focus();</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n36">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="230.0742462051109" width="600.0" x="1053.4597242552907" y="-7973.237123102555"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="217.9921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.041029352555597">9. Arbeiten mit dataset für benutzerdefinierte Attribute
Bad Practice: getAttribute() und setAttribute() für Datenwerte verwenden

const item = document.querySelector(".item");
item.setAttribute("data-id", "123");
console.log(item.getAttribute("data-id"));

❌ setAttribute() und getAttribute() sind langsam und unpraktisch für benutzerdefinierte Daten.
Best Practice: dataset verwenden

const item = document.querySelector(".item");
item.dataset.id = "123";
console.log(item.dataset.id);

✅ dataset ist schneller, einfacher zu lesen und zu schreiben.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n37">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="55.12783923065922" width="600.0" x="1673.4597242552907" y="-7885.7639196153295"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.3647008653297235">const item = document.querySelector(".item");
item.dataset.id = "123";
console.log(item.dataset.id);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n38">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="324.3525565538343" width="600.0" x="1053.4597242552907" y="-7371.343341768981"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="316.921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.715340776917401">11. MutationObserver zur Überwachung von DOM-Änderungen
Bad Practice: SetInterval für DOM-Überwachung verwenden

setInterval(() =&gt; {
    const newElement = document.querySelector(".dynamic-element");
    if (newElement) {
        console.log("Neues Element gefunden!");
    }
}, 1000);

❌ setInterval() ist ineffizient und kann zu unnötigen Abfragen führen.
Best Practice: MutationObserver verwenden

const observer = new MutationObserver(mutations =&gt; {
    mutations.forEach(mutation =&gt; {
        console.log("DOM wurde geändert:", mutation);
    });
});
observer.observe(document.body, { childList: true, subtree: true });

✅ MutationObserver erkennt Änderungen sofort und ist ressourcenschonender.
</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n39">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="99.60196084382551" width="600.0" x="1673.4597242552907" y="-7258.9680439139765"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="90.796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.4025429219127545">const observer = new MutationObserver(mutations =&gt; {
    mutations.forEach(mutation =&gt; {
        console.log("DOM wurde geändert:", mutation);
    });
});
observer.observe(document.body, { childList: true, subtree: true });</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n40">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="314.8960077600065" width="600.0" x="1053.4597242552907" y="-8644.748797530796"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="302.7890625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.053472630002943">7. Asynchrone DOM-Manipulation mit requestAnimationFrame()
Bad Practice: Direkt in einer Schleife ändern

for (let i = 0; i &lt; 100; i++) {
    document.body.style.backgroundColor = `rgb(${i}, ${i}, ${i})`; // Flackert
}

❌ Viele DOM-Änderungen blockieren den Haupt-Thread.
Best Practice: requestAnimationFrame() nutzen

let i = 0;
function animate() {
    if (i &lt; 100) {
        document.body.style.backgroundColor = `rgb(${i}, ${i}, ${i})`;
        i++;
        requestAnimationFrame(animate);
    }
}
animate();

✅ requestAnimationFrame() sorgt für sanfte Änderungen und bessere Performance.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n41">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="296.6151370490265" width="600.0" x="1053.4597242552907" y="-8299.852409794355"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="288.65625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.9794435245130444">8. Delegation von Event-Listenern
Bad Practice: Event-Listener auf jedes einzelne Element setzen

const items = document.querySelectorAll(".item");
items.forEach(item =&gt; {
    item.addEventListener("click", () =&gt; {
        alert("Geklickt!");
    });
});

❌ Nicht effizient bei vielen Elementen, da für jedes Element ein eigener Event-Listener erstellt wird.
Best Practice: Event Delegation nutzen

document.querySelector("#container").addEventListener("click", (event) =&gt; {
    if (event.target.classList.contains("item")) {
        alert("Geklickt!");
    }
});

✅ Nur ein einziger Event-Listener auf dem Container, der alle Klicks effizient behandelt.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n42">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="82.53179296377903" width="600.0" x="1673.4597242552907" y="-8192.810737751732"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="76.6640625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.9338652318892855">document.querySelector("#container").addEventListener("click", (event) =&gt; {
    if (event.target.classList.contains("item")) {
        alert("Geklickt!");
    }
});</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n43">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="311.81919303644344" width="600.0" x="1053.4597242552907" y="-7713.162771121396"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="302.7890625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.515065268221406">10. DOM-Performance mit cloneNode() optimieren
Bad Practice: Wiederholtes Erstellen ähnlicher Elemente

for (let i = 0; i &lt; 100; i++) {
    const div = document.createElement("div");
    div.textContent = `Element ${i}`;
    document.body.appendChild(div);
}

❌ Jedes Mal ein neues Element erstellen ist ineffizient.
Best Practice: cloneNode() nutzen

const template = document.createElement("div");
template.textContent = "Element";
for (let i = 0; i &lt; 100; i++) {
    const clone = template.cloneNode(true);
    clone.textContent += ` ${i}`;
    document.body.appendChild(clone);
}

✅ cloneNode() verbessert die Performance bei wiederholten Elementen.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n44">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="110.04156226596683" width="600.0" x="1673.4597242552907" y="-7612.273955736158"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="104.9296875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.555937382983757">const template = document.createElement("div");
template.textContent = "Element";
for (let i = 0; i &lt; 100; i++) {
    const clone = template.cloneNode(true);
    clone.textContent += ` ${i}`;
    document.body.appendChild(clone);
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n45">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="394.90782070466224" width="600.0" x="1053.4597242552907" y="-7016.9904182888395"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="387.5859375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.6609416023311496">12. Dynamische Inhalte mit template-Tag rendern
Bad Practice: innerHTML zum Erstellen von HTML-Strukturen nutzen

document.body.innerHTML += `
    &lt;div class="card"&gt;
        &lt;h2&gt;Title&lt;/h2&gt;
        &lt;p&gt;Beschreibung&lt;/p&gt;
    &lt;/div&gt;
`;

❌ Erhöht das Risiko von XSS und überschreibt möglicherweise bestehende Inhalte.
Best Practice: template-Tag verwenden

&lt;template id="card-template"&gt;
    &lt;div class="card"&gt;
        &lt;h2&gt;&lt;/h2&gt;
        &lt;p&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/template&gt;

const template = document.querySelector("#card-template");
const clone = template.content.cloneNode(true);
clone.querySelector("h2").textContent = "Title";
clone.querySelector("p").textContent = "Beschreibung";
document.body.appendChild(clone);

✅ template sorgt für eine saubere Trennung von Struktur und JavaScript.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n46">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="99.60196084382528" width="600.0" x="1673.4597242552907" y="-6968.064472485405"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="90.796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.4025429219127545">&lt;template id="card-template"&gt;
    &lt;div class="card"&gt;
        &lt;h2&gt;&lt;/h2&gt;
        &lt;p&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/template&gt;</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n47">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="231.76527223692705" width="600.0" x="1053.4597242552907" y="-5814.081445642273"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="217.9921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.886542368463779">15. Scroll-Performance mit passive: true verbessern
Bad Practice: wheel- oder touchmove-Events ohne passive: true

document.addEventListener("wheel", (event) =&gt; {
    event.preventDefault(); // Blockiert das Scrollen
});

❌ Blockiert das native Scroll-Verhalten und kann die Performance beeinträchtigen.
Best Practice: passive: true für scroll-bezogene Events

document.addEventListener("wheel", (event) =&gt; {
    console.log("Scroll detected!");
}, { passive: true });

✅ Verbessert die Scroll-Performance und verhindert unnötige Blockaden.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n48">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="50.291482984358936" width="600.0" x="1673.4597242552907" y="-5723.344551015989"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.9465227421796953">document.addEventListener("wheel", (event) =&gt; {
    console.log("Scroll detected!");
}, { passive: true });</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n49">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="474.08259529363795" width="600.0" x="1053.4597242552907" y="-5552.315900821422"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="458.25" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="7.916297646818748">16. Shadow DOM für isolierte Komponenten
Bad Practice: Globale CSS-Stile beeinflussen alle Elemente

button {
    background-color: red;
}

&lt;button&gt;Ich bin rot&lt;/button&gt; &lt;!-- Wird von globalem CSS betroffen --&gt;

❌ Kann zu unerwarteten Stiländerungen führen, wenn das CSS über mehrere Komponenten hinweg greift.
Best Practice: Shadow DOM nutzen

const shadowHost = document.createElement("div");
document.body.appendChild(shadowHost);

const shadowRoot = shadowHost.attachShadow({ mode: "open" });

const button = document.createElement("button");
button.textContent = "Ich bin unabhängig!";
shadowRoot.appendChild(button);

const style = document.createElement("style");
style.textContent = `
    button {
        background-color: blue;
        color: white;
    }
`;
shadowRoot.appendChild(style);

✅ Stile und DOM sind isoliert und beeinflussen den Rest der Seite nicht.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n50">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="250.02702313902319" width="600.0" x="1673.4597242552907" y="-5440.288114744115"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="246.2578125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.8846053195120476">const shadowHost = document.createElement("div");
document.body.appendChild(shadowHost);

const shadowRoot = shadowHost.attachShadow({ mode: "open" });

const button = document.createElement("button");
button.textContent = "Ich bin unabhängig!";
shadowRoot.appendChild(button);

const style = document.createElement("style");
style.textContent = `
    button {
        background-color: blue;
        color: white;
    }
`;
shadowRoot.appendChild(style);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n51">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="449.6962333485328" width="600.0" x="1053.4597242552907" y="-6592.082243658394"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="429.984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="9.855929174266748">13. Asynchrone DOM-Manipulation mit setTimeout()
Bad Practice: Große DOM-Manipulationen auf einmal ausführen

const list = document.createElement("ul");
for (let i = 0; i &lt; 1000; i++) {
    const item = document.createElement("li");
    item.textContent = `Item ${i}`;
    list.appendChild(item);
}
document.body.appendChild(list);

❌ Kann den UI-Thread blockieren, wenn zu viele Elemente auf einmal hinzugefügt werden.
Best Practice: setTimeout() nutzen, um den Thread nicht zu blockieren

const list = document.createElement("ul");
document.body.appendChild(list);

let i = 0;
function addItems() {
    for (let j = 0; j &lt; 50; j++) {
        if (i &gt;= 1000) return;
        const item = document.createElement("li");
        item.textContent = `Item ${i++}`;
        list.appendChild(item);
    }
    setTimeout(addItems, 10);
}
addItems();

✅ setTimeout() sorgt dafür, dass der UI-Thread nicht überlastet wird.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n52">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="207.91282559853948" width="600.0" x="1673.4597242552907" y="-6471.190539783397"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="203.859375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.026725299269856">const list = document.createElement("ul");
document.body.appendChild(list);

let i = 0;
function addItems() {
    for (let j = 0; j &lt; 50; j++) {
        if (i &gt;= 1000) return;
        const item = document.createElement("li");
        item.textContent = `Item ${i++}`;
        list.appendChild(item);
    }
    setTimeout(addItems, 10);
}
addItems();</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n53">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="268.3038772144202" width="600.0" x="1053.4597242552907" y="-6112.385668765941"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="260.390625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.956626107210468">14. Optimale Nutzung von requestIdleCallback()
Bad Practice: Zu viele DOM-Updates im requestAnimationFrame()

function updateDOM() {
    requestAnimationFrame(() =&gt; {
        document.body.textContent = "Update!";
    });
}
updateDOM();

❌ requestAnimationFrame() ist für Animationen gedacht, nicht für nicht-visuelle DOM-Updates.
Best Practice: requestIdleCallback() für nicht-dringende Updates

requestIdleCallback(() =&gt; {
    document.body.textContent = "Update!";
});

✅ requestIdleCallback() nutzt freie Zeit, ohne die UI-Performance zu beeinträchtigen.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n54">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="50.29148298435848" width="600.0" x="1673.4597242552907" y="-6003.379471650909"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.9465227421787858">requestIdleCallback(() =&gt; {
    document.body.textContent = "Update!";
});</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n55">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="200.24998231458483" width="600.0" x="1053.4597242552907" y="-9720.320229252531"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="189.7265625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.261709907292243">3. Event Listener richtig verwenden
Bad Practice: Inline-Event-Handler

&lt;button onclick="alert('Nicht empfohlen!')"&gt;Klick!&lt;/button&gt;

❌ Nicht skalierbar, schwer zu warten, und trennt nicht HTML und JavaScript.
Best Practice: addEventListener() verwenden

button.addEventListener("click", () =&gt; {
    alert("Best Practice!");
});

✅ Trennung von HTML und JavaScript, besser für Wartung und Skalierbarkeit.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n56">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="50.12554340195834" width="600.0" x="1673.4597242552907" y="-9645.258009796218"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.8635529509792832">button.addEventListener("click", () =&gt; {
    alert("Best Practice!");
});</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n57">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="337.81389217730447" width="600.0" x="1053.4597242552907" y="-9490.070041326748"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="316.921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="10.446008588653058">4. DOM-Änderungen optimieren
Bad Practice: Direktes Manipulieren in einer Schleife

for (let i = 0; i &lt; 1000; i++) {
    const div = document.createElement("div");
    div.textContent = `Element ${i}`;
    document.body.appendChild(div); // Jedes Mal DOM-Manipulation =&gt; Langsam!
}

❌ Viele DOM-Manipulationen in einer Schleife sind ineffizient.
Best Practice: Dokumentfragmente nutzen

const fragment = document.createDocumentFragment();
for (let i = 0; i &lt; 1000; i++) {
    const div = document.createElement("div");
    div.textContent = `Element ${i}`;
    fragment.appendChild(div);
}
document.body.appendChild(fragment); // Nur eine DOM-Manipulation

✅ DocumentFragment minimiert die Anzahl direkter DOM-Manipulationen und verbessert die Performance.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n58">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="110.74222300017118" width="600.0" x="1673.4597242552907" y="-9376.53420673818"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="104.9296875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.9062677500860445">const fragment = document.createDocumentFragment();
for (let i = 0; i &lt; 1000; i++) {
    const div = document.createElement("div");
    div.textContent = `Element ${i}`;
    fragment.appendChild(div);
}
document.body.appendChild(fragment); // Nur eine DOM-Manipulation</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n59">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="190.09016831648506" width="600.0" x="1053.4597242552907" y="-10186.70778257094"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="175.59375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="7.248209158242389">1. DOM-Elemente auswählen
Bad Practice: Verwendung von document.write()

document.write("&lt;h1&gt;Schlechter Stil!&lt;/h1&gt;"); // Überschreibt die gesamte Seite

❌ document.write() sollte vermieden werden, da es den gesamten DOM-Inhalt überschreiben kann.
Best Practice: document.querySelector() verwenden

const headline = document.querySelector("h1"); // Selektiert das erste &lt;h1&gt;-Element
console.log(headline.textContent);

✅ querySelector() ist flexibel und leistungsfähig.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n60">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="35.22829990434991" width="600.0" x="1673.4597242552907" y="-10109.276848364872"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="34.265625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.48133745217455726">const headline = document.querySelector("h1"); // Selektiert das erste &lt;h1&gt;-Element
console.log(headline.textContent);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n61">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="216.29695088317067" width="600.0" x="1053.4597242552907" y="-9966.617523060633"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="203.859375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.218787941585106">2. Elemente erstellen und anhängen
Bad Practice: innerHTML für neue Elemente verwenden

document.body.innerHTML += "&lt;button&gt;Klick mich!&lt;/button&gt;"; // Kann bestehende Inhalte überschreiben

❌ Sicherheitsrisiko durch mögliche XSS-Angriffe, wenn Benutzereingaben eingebunden werden.
Best Practice: document.createElement() verwenden

const button = document.createElement("button");
button.textContent = "Klick mich!";
document.body.appendChild(button);

✅ createElement() ist sicherer und verhindert das Überschreiben bestehender Inhalte.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n62">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="56.71172341946169" width="600.0" x="1673.4597242552907" y="-9886.82490932878"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.156642959731471">const button = document.createElement("button");
button.textContent = "Klick mich!";
document.body.appendChild(button);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n63">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="203.16780985422446" width="600.0" x="1053.4597242552907" y="-9122.256127149334"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="189.7265625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.720623677112599">5. Klassen und Styles ändern
Bad Practice: element.style direkt manipulieren

button.style.backgroundColor = "red";
button.style.color = "white";
button.style.padding = "10px";

❌ Unübersichtlich und schwer wartbar.
Best Practice: classList verwenden

button.classList.add("btn-primary"); // CSS-Klasse anwenden

✅ Trennung von Struktur (HTML), Stil (CSS) und Verhalten (JS).</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n64">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="24.013302599272947" width="600.0" x="1673.4597242552907" y="-9032.678873521858"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.94024504963636">button.classList.add("btn-primary"); // CSS-Klasse anwenden</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n65">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="214.33917045739867" width="600.0" x="1053.4597242552907" y="-8889.08823602235"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="203.859375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.239897728699361">6. Elemente sicher entfernen
Bad Practice: innerHTML = "" zum Leeren eines Containers

document.body.innerHTML = ""; // Entfernt ALLES inkl. Event-Listener

❌ Entfernt nicht nur Inhalte, sondern auch Event-Listener!
Best Practice: removeChild() oder textContent = "" verwenden

const container = document.getElementById("container");
while (container.firstChild) {
    container.removeChild(container.firstChild); // Sicheres Entfernen von Elementen
}

✅ Erhält bestehende Event-Listener auf anderen Elementen.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n66">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="65.5659013601819" width="600.0" x="1673.4597242552907" y="-8814.701601473742"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="62.53125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.5173256800917443">const container = document.getElementById("container");
while (container.firstChild) {
    container.removeChild(container.firstChild); // Sicheres Entfernen von Elementen
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n67">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="137.33816113740272" width="600.0" x="1673.4597242552907" y="-8555.969874219494"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="133.1953125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.071424318701247">let i = 0;
function animate() {
    if (i &lt; 100) {
        document.body.style.backgroundColor = `rgb(${i}, ${i}, ${i})`;
        i++;
        requestAnimationFrame(animate);
    }
}
animate();</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n68">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="77.20172320411962" width="600.0" x="1673.4597242552907" y="-6759.410385411584"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="76.6640625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.268830352059922">const template = document.querySelector("#card-template");
const clone = template.content.cloneNode(true);
clone.querySelector("h2").textContent = "Title";
clone.querySelector("p").textContent = "Beschreibung";
document.body.appendChild(clone);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n69">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="141.02837761064296" width="600.0" x="1053.4597242552907" y="-310.44156975770244"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="133.1953125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.916532555321453">35. Virtual DOM für Hochleistungs-Rendering

    Best Practice: Nutze Bibliotheken wie React oder Vue für große DOM-Manipulationen.

const root = document.getElementById("root");
const element = React.createElement("h1", null, "Hallo Welt!");
ReactDOM.createRoot(root).render(element);

✅ Nutzt den Virtual DOM für bessere Performance.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n70">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="50.291482984358936" width="600.0" x="1673.4597242552907" y="-265.07312244456045"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.946522742179468">const root = document.getElementById("root");
const element = React.createElement("h1", null, "Hallo Welt!");
ReactDOM.createRoot(root).render(element);</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n71">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="119.41282202907632" width="600.0" x="1053.4597242552907" y="-139.4131570462842"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="104.9296875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="7.241567264538162">36. backdrop-filter für Glas-Effekte

.modal {
    backdrop-filter: blur(10px);
}

✅ Erzeugt moderne UI-Effekte.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n72">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="61.654695430044285" width="600.0" x="1673.4597242552907" y="-110.53409374676818"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.628128965022142">.modal {
    backdrop-filter: blur(10px);
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n73">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="95.91290610137685" width="600.0" x="1053.4597242552907" y="-596.3227228919583"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="90.796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.558015550688424">33. scrollIntoView() für sanftes Scrollen
Best Practice: Automatisch zu einem Element scrollen

document.querySelector("#ziel").scrollIntoView({ behavior: "smooth" });

✅ Bietet flüssige UX für Navigationen.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n74">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="23.955474320239887" width="600.0" x="1673.4597242552907" y="-560.3440070013896"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.9113309101198865">document.querySelector("#ziel").scrollIntoView({ behavior: "smooth" });</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n75">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="129.96794905313885" width="600.0" x="1053.4597242552907" y="-470.40976817736316"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="119.0625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.452724526569455">34. PointerEvents für Multi-Touch-Unterstützung
Best Practice: pointerdown statt mousedown nutzen

element.addEventListener("pointerdown", () =&gt; {
    console.log("Geklickt oder berührt!");
});

✅ Funktioniert mit Maus, Touch und Stylus.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n76">
      <data key="d5"/>
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="50.29148298435848" width="600.0" x="1673.4597242552907" y="-430.5715351429729"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.3984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="0.9465227421792406">element.addEventListener("pointerdown", () =&gt; {
    console.log("Geklickt oder berührt!");
});</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <edge id="e0" source="n1" target="n2">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="35.0" sy="-0.0" tx="-115.5" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e1" source="n0" target="n1">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="80.92378218652311" sy="-0.0" tx="-35.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e2" source="n2" target="n3">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="115.5" sy="-0.0" tx="-111.80607994112222" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e3" source="n4" target="n5">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e4" source="n3" target="n4">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="3.611111111111107" tx="-300.0" ty="-0.0">
            <y:Point x="941.9597242552907" y="-4409.347023809523"/>
            <y:Point x="941.9597242552907" y="-2524.138492063492"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e5" source="n3" target="n6">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="4.722222222222218" tx="-300.0" ty="-0.0">
            <y:Point x="909.9597242552907" y="-4408.235912698412"/>
            <y:Point x="909.9597242552907" y="-1943.5130952380953"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e6" source="n6" target="n7">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e7" source="n3" target="n8">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="2.4999999999999964" tx="-300.0" ty="-0.0">
            <y:Point x="973.9597242552907" y="-4410.458134920635"/>
            <y:Point x="973.9597242552907" y="-3071.313492063492"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e8" source="n3" target="n9">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="3.055555555555552" tx="-300.0" ty="-0.0">
            <y:Point x="957.9597242552907" y="-4409.902579365079"/>
            <y:Point x="957.9597242552907" y="-2792.7087301587303"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e9" source="n9" target="n10">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e10" source="n11" target="n12">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e11" source="n3" target="n11">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="4.1666666666666625" tx="-300.0" ty="-0.0">
            <y:Point x="925.9597242552907" y="-4408.791468253968"/>
            <y:Point x="925.9597242552907" y="-2249.3011904761906"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e12" source="n3" target="n13">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="5.277777777777773" tx="-300.0" ty="-0.0">
            <y:Point x="893.9597242552907" y="-4407.680357142857"/>
            <y:Point x="893.9597242552907" y="-1686.2896825396826"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e13" source="n13" target="n14">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e14" source="n15" target="n16">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e15" source="n3" target="n15">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="6.944444444444443" tx="-300.0" ty="-0.0">
            <y:Point x="845.9597242552907" y="-4406.01369047619"/>
            <y:Point x="845.9597242552907" y="-991.6912698412698"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e16" source="n3" target="n17">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="7.5" tx="-300.0" ty="-0.0">
            <y:Point x="829.9597242552907" y="-4405.458134920635"/>
            <y:Point x="829.9597242552907" y="-709.5757936507937"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e17" source="n17" target="n18">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e18" source="n19" target="n20">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e19" source="n3" target="n19">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="5.833333333333329" tx="-300.0" ty="-0.0">
            <y:Point x="877.9597242552907" y="-4407.124801587302"/>
            <y:Point x="877.9597242552907" y="-1468.675"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e20" source="n3" target="n21">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="6.388888888888886" tx="-300.0" ty="-0.0">
            <y:Point x="861.9597242552907" y="-4406.569246031746"/>
            <y:Point x="861.9597242552907" y="-1277.6126984126984"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e21" source="n21" target="n22">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e22" source="n23" target="n24">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e23" source="n3" target="n23">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="0.277777777777775" tx="-300.0" ty="-0.0">
            <y:Point x="1037.9597242552907" y="-4412.680357142857"/>
            <y:Point x="1037.9597242552907" y="-4240.263492063492"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e24" source="n3" target="n25">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="0.8333333333333304" tx="-300.0" ty="-0.0">
            <y:Point x="1021.9597242552907" y="-4412.124801587302"/>
            <y:Point x="1021.9597242552907" y="-3894.8742063492064"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e25" source="n25" target="n26">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e26" source="n27" target="n28">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e27" source="n3" target="n27">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-0.8333333333333357" tx="-300.0" ty="-0.0">
            <y:Point x="1021.9597242552907" y="-4413.791468253968"/>
            <y:Point x="1021.9597242552907" y="-4916.396428571428"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e28" source="n3" target="n29">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-0.27777777777778034" tx="-300.0" ty="-0.0">
            <y:Point x="1037.9597242552907" y="-4413.235912698412"/>
            <y:Point x="1037.9597242552907" y="-4585.652777777777"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e29" source="n29" target="n30">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e30" source="n31" target="n32">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e31" source="n3" target="n31">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="1.3888888888888857" tx="-300.0" ty="-0.0">
            <y:Point x="1005.9597242552907" y="-4411.569246031746"/>
            <y:Point x="1005.9597242552907" y="-3594.383333333333"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e32" source="n3" target="n33">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="1.944444444444441" tx="-300.0" ty="-0.0">
            <y:Point x="989.9597242552907" y="-4411.01369047619"/>
            <y:Point x="989.9597242552907" y="-3328.4039682539683"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e33" source="n33" target="n34">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e34" source="n8" target="n35">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e35" source="n36" target="n37">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e36" source="n3" target="n36">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-5.277777777777779" tx="-300.0" ty="-0.0">
            <y:Point x="893.9597242552907" y="-4418.235912698412"/>
            <y:Point x="893.9597242552907" y="-7858.2"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e37" source="n3" target="n38">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-4.166666666666668" tx="-300.0" ty="-0.0">
            <y:Point x="925.9597242552907" y="-4417.124801587302"/>
            <y:Point x="925.9597242552907" y="-7209.167063492064"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e38" source="n38" target="n39">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e39" source="n3" target="n40">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-6.388888888888889" tx="-300.0" ty="-0.0">
            <y:Point x="861.9597242552907" y="-4419.347023809523"/>
            <y:Point x="861.9597242552907" y="-8487.300793650793"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e40" source="n3" target="n41">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-5.833333333333334" tx="-300.0" ty="-0.0">
            <y:Point x="877.9597242552907" y="-4418.791468253968"/>
            <y:Point x="877.9597242552907" y="-8151.5448412698415"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e41" source="n41" target="n42">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e42" source="n43" target="n44">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e43" source="n3" target="n43">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-4.722222222222223" tx="-300.0" ty="-0.0">
            <y:Point x="909.9597242552907" y="-4417.680357142857"/>
            <y:Point x="909.9597242552907" y="-7557.253174603175"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e44" source="n3" target="n45">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-3.6111111111111125" tx="-300.0" ty="-0.0">
            <y:Point x="941.9597242552907" y="-4416.569246031746"/>
            <y:Point x="941.9597242552907" y="-6819.536507936508"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e45" source="n45" target="n46">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-98.72695517616556" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e46" source="n47" target="n48">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e47" source="n3" target="n47">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-1.9444444444444464" tx="-300.0" ty="-0.0">
            <y:Point x="989.9597242552907" y="-4414.902579365079"/>
            <y:Point x="989.9597242552907" y="-5698.198809523809"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e48" source="n3" target="n49">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-1.388888888888891" tx="-300.0" ty="-0.0">
            <y:Point x="1005.9597242552907" y="-4414.347023809523"/>
            <y:Point x="1005.9597242552907" y="-5315.274603174603"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e49" source="n49" target="n50">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e50" source="n51" target="n52">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e51" source="n3" target="n51">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-3.055555555555557" tx="-300.0" ty="-0.0">
            <y:Point x="957.9597242552907" y="-4416.01369047619"/>
            <y:Point x="957.9597242552907" y="-6367.234126984127"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e52" source="n3" target="n53">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-2.5000000000000018" tx="-300.0" ty="-0.0">
            <y:Point x="973.9597242552907" y="-4415.458134920635"/>
            <y:Point x="973.9597242552907" y="-5978.23373015873"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e53" source="n53" target="n54">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e54" source="n55" target="n56">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e55" source="n3" target="n55">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-8.61111111111111" tx="-300.0" ty="-0.0">
            <y:Point x="797.9597242552907" y="-4421.569246031746"/>
            <y:Point x="797.9597242552907" y="-9620.195238095239"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e56" source="n3" target="n57">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-8.055555555555555" tx="-300.0" ty="-0.0">
            <y:Point x="813.9597242552907" y="-4421.01369047619"/>
            <y:Point x="813.9597242552907" y="-9321.163095238095"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e57" source="n57" target="n58">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e58" source="n59" target="n60">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e59" source="n3" target="n59">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-9.722222222222221" tx="-300.0" ty="-0.0">
            <y:Point x="765.9597242552907" y="-4422.680357142857"/>
            <y:Point x="765.9597242552907" y="-10091.662698412698"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e60" source="n3" target="n61">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-9.166666666666666" tx="-300.0" ty="-0.0">
            <y:Point x="781.9597242552907" y="-4422.124801587302"/>
            <y:Point x="781.9597242552907" y="-9858.469047619048"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e61" source="n61" target="n62">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e62" source="n63" target="n64">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e63" source="n3" target="n63">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-7.5" tx="-300.0" ty="-0.0">
            <y:Point x="829.9597242552907" y="-4420.458134920635"/>
            <y:Point x="829.9597242552907" y="-9020.672222222222"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e64" source="n3" target="n65">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="-6.944444444444445" tx="-300.0" ty="-0.0">
            <y:Point x="845.9597242552907" y="-4419.902579365079"/>
            <y:Point x="845.9597242552907" y="-8781.91865079365"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e65" source="n65" target="n66">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e66" source="n40" target="n67">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e67" source="n45" target="n68">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="98.72695517616555" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e68" source="n69" target="n70">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e69" source="n3" target="n69">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="9.166666666666671" tx="-300.0" ty="-0.0">
            <y:Point x="781.9597242552907" y="-4403.791468253968"/>
            <y:Point x="781.9597242552907" y="-239.92738095238096"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e70" source="n3" target="n71">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="9.722222222222229" tx="-300.0" ty="-0.0">
            <y:Point x="765.9597242552907" y="-4403.235912698412"/>
            <y:Point x="765.9597242552907" y="-79.70674603174604"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e71" source="n71" target="n72">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e72" source="n73" target="n74">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e73" source="n3" target="n73">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="8.055555555555557" tx="-300.0" ty="-0.0">
            <y:Point x="813.9597242552907" y="-4404.902579365079"/>
            <y:Point x="813.9597242552907" y="-548.3662698412699"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e74" source="n3" target="n75">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="111.80607994112222" sy="8.611111111111114" tx="-300.0" ty="-0.0">
            <y:Point x="797.9597242552907" y="-4404.347023809523"/>
            <y:Point x="797.9597242552907" y="-405.4257936507937"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e75" source="n75" target="n76">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
  </graph>
  <data key="d7">
    <y:Resources/>
  </data>
</graphml>
