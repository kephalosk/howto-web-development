<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:java="http://www.yworks.com/xml/yfiles-common/1.0/java" xmlns:sys="http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0" xmlns:x="http://www.yworks.com/xml/yfiles-common/markup/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yEd 3.21.1-->
  <key attr.name="Beschreibung" attr.type="string" for="graph" id="d0"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key for="graphml" id="d7" yfiles.type="resources"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
    <data key="d0"/>
    <node id="n0">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="161.84756437304623" x="0.0" y="-1410.2718253968253"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="161.84756437304623" x="4.0" xml:space="preserve" y="-0.06640625">Javascript</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n1">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="70.0" x="181.84756437304623" y="-1410.2718253968253"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="70.0" x="4.0" xml:space="preserve" y="-0.06640625">Praxis</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n2">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="296.2946224643531" x="271.8475643730462" y="-1410.2718253968253"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="296.2946224643531" x="4.0" xml:space="preserve" y="-0.06640625">3. Modularisierung und Programmierparadigmen</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n3">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="335.9108445272643" x="588.1421868373993" y="-1410.2718253968253"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="335.9108445272643" x="4.0" xml:space="preserve" y="-0.06640625">Komponentenbasierte Entwicklung mit Frameworks</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n4">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="576.0593334082411" width="600.0" x="991.0530313646636" y="-2595.01220638666"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="557.1796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="9.4398229541207">2. Datenfluss in Komponenten (Props vs. State)

Komponenten können Daten durch Props empfangen oder mit eigenem State verwalten.
Bad Practice: Direkte DOM-Manipulation in React

function Counter() {
  let count = 0;

  function increment() {
    count++;
    document.getElementById("count").innerText = count;
  }

  return (
    &lt;div&gt;
      &lt;p id="count"&gt;0&lt;/p&gt;
      &lt;button onClick={increment}&gt;+&lt;/button&gt;
    &lt;/div&gt;
  );
}

    ❌ Problem: Manipuliert direkt den DOM, React kann den Zustand nicht verwalten.

Best Practice: Nutzung von useState

import { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    &lt;div&gt;
      &lt;p&gt;{count}&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;
    &lt;/div&gt;
  );
}

    ✅ Besser: useState, React verwaltet die Änderungen effizient.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n5">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="179.04367206508664" width="600.0" x="1611.0530313646636" y="-2396.504375715083"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="175.59375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="1.7249610325434332">import { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    &lt;div&gt;
      &lt;p&gt;{count}&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;
    &lt;/div&gt;
  );
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n6">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="576.0593334082412" width="600.0" x="991.0530313646636" y="-1988.9526825771368"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="557.1796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="9.4398229541207">3. Kommunikation zwischen Komponenten (Props vs. Context)

Komponenten kommunizieren normalerweise über Props oder Context API.
Bad Practice: Tief verschachtelte Props (Prop Drilling)

function Child({ message }) {
  return &lt;p&gt;{message}&lt;/p&gt;;
}

function Parent({ message }) {
  return &lt;Child message={message} /&gt;;
}

function App() {
  return &lt;Parent message="Hallo!" /&gt;;
}

    ❌ Problem: Wenn message über viele Ebenen weitergegeben wird, wird der Code unübersichtlich.

Best Practice: Nutzung des Context API

import { createContext, useContext } from "react";

const MessageContext = createContext();

function Child() {
  const message = useContext(MessageContext);
  return &lt;p&gt;{message}&lt;/p&gt;;
}

function App() {
  return (
    &lt;MessageContext.Provider value="Hallo!"&gt;
      &lt;Child /&gt;
    &lt;/MessageContext.Provider&gt;
  );
}

    ✅ Besser: Context API vermeidet Prop-Drilling.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n7">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="243.79863409752193" width="600.0" x="1611.0530313646636" y="-1822.8223329217772"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="232.125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.836817048761077">import { createContext, useContext } from "react";

const MessageContext = createContext();

function Child() {
  const message = useContext(MessageContext);
  return &lt;p&gt;{message}&lt;/p&gt;;
}

function App() {
  return (
    &lt;MessageContext.Provider value="Hallo!"&gt;
      &lt;Child /&gt;
    &lt;/MessageContext.Provider&gt;
  );
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n8">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="223.39753791061912" width="600.0" x="1611.0530313646636" y="-3009.4801181616594"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="175.59375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="23.901893955309788">function Button({ text, onClick }) {
  return &lt;button onClick={onClick}&gt;{text}&lt;/button&gt;;
}

function App() {
  return (
    &lt;div&gt;
      &lt;h1&gt;Willkommen&lt;/h1&gt;
      &lt;Button text="Klick mich" onClick={() =&gt; alert('Hallo!')} /&gt;
    &lt;/div&gt;
  );
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n9">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="545.5380326407176" width="600.0" x="991.0530313646636" y="-3170.550365526708"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="528.9140625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="8.311985070358787">1. Grundlagen der Komponentenbasierten Entwicklung

In modernen JavaScript-Frameworks wie React, Vue oder Svelte wird UI in wiederverwendbare Komponenten unterteilt.
Bad Practice: Keine Wiederverwendung, alles in einer Datei

function App() {
  return `
    &lt;div&gt;
      &lt;h1&gt;Willkommen&lt;/h1&gt;
      &lt;button onclick="alert('Hallo!')"&gt;Klick mich&lt;/button&gt;
    &lt;/div&gt;
  `;
}

document.getElementById('root').innerHTML = App();

    ❌ Problem: Keine Wiederverwendbarkeit, unstrukturierter Code.

Best Practice: Modularisierung mit Komponenten (React-Beispiel)

function Button({ text, onClick }) {
  return &lt;button onClick={onClick}&gt;{text}&lt;/button&gt;;
}

function App() {
  return (
    &lt;div&gt;
      &lt;h1&gt;Willkommen&lt;/h1&gt;
      &lt;Button text="Klick mich" onClick={() =&gt; alert('Hallo!')} /&gt;
    &lt;/div&gt;
  );
}

export default App;

    ✅ Besser: Wiederverwendbare Button-Komponente, getrennt von der App-Logik.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n10">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="243.31434358849162" width="600.0" x="1611.0530313646636" y="-1221.2778067148809"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="232.125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.594671794245869">function useWeather() {
  const [weather, setWeather] = useState(null);

  useEffect(() =&gt; {
    fetch("https://api.weather.com")
      .then((res) =&gt; res.json())
      .then((data) =&gt; setWeather(data));
  }, []);

  return weather;
}

function Weather() {
  const weather = useWeather();
  return &lt;p&gt;Das Wetter ist: {weather?.temperature}°C&lt;/p&gt;;
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n11">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="397.57239007195165" width="600.0" x="991.0530313646636" y="-786.3477029724838"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="387.5859375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.993226285975879">5. Zustandsmanagement mit Redux oder Zustand

Für größere Anwendungen braucht es ein besseres Zustandsmanagement.
Bad Practice: Globales useState für App-Zustand

function App() {
  const [user, setUser] = useState(null);
  return &lt;Profile user={user} /&gt;;
}

    ❌ Problem: Jeder muss user als Prop weitergeben.

Best Practice: Zustand mit Zustand-Library

import create from "zustand";

const useStore = create((set) =&gt; ({
  user: null,
  setUser: (user) =&gt; set({ user }),
}));

function Profile() {
  const user = useStore((state) =&gt; state.user);
  return &lt;p&gt;{user ? `Hallo, ${user.name}` : "Nicht eingeloggt"}&lt;/p&gt;;
}

    ✅ Besser: Zustand zentral verwaltet, keine unnötigen Props.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n12">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="566.5452994664694" width="600.0" x="991.0530313646636" y="-1382.8932846538696"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="557.1796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.68280598323463">4. Separation von Logik und Darstellung (Hooks, Composition Pattern)

Logik und UI sollten getrennt werden.
Bad Practice: Business-Logik direkt in der UI

function Weather() {
  const [weather, setWeather] = useState(null);

  useEffect(() =&gt; {
    fetch("https://api.weather.com")
      .then((res) =&gt; res.json())
      .then((data) =&gt; setWeather(data));
  }, []);

  return &lt;p&gt;Das Wetter ist: {weather?.temperature}°C&lt;/p&gt;;
}

    ❌ Problem: API-Logik ist in der UI-Komponente eingebettet.

Best Practice: Custom Hook für die Logik

function useWeather() {
  const [weather, setWeather] = useState(null);

  useEffect(() =&gt; {
    fetch("https://api.weather.com")
      .then((res) =&gt; res.json())
      .then((data) =&gt; setWeather(data));
  }, []);

  return weather;
}

function Weather() {
  const weather = useWeather();
  return &lt;p&gt;Das Wetter ist: {weather?.temperature}°C&lt;/p&gt;;
}

    ✅ Besser: Custom Hook trennt Logik von UI.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n13">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="174.36898165880962" width="600.0" x="1611.0530313646636" y="-674.7459987659128"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="161.4609375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.454022079404808">import create from "zustand";

const useStore = create((set) =&gt; ({
  user: null,
  setUser: (user) =&gt; set({ user }),
}));

function Profile() {
  const user = useStore((state) =&gt; state.user);
  return &lt;p&gt;{user ? `Hallo, ${user.name}` : "Nicht eingeloggt"}&lt;/p&gt;;
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n14">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="338.7746492633263" width="600.0" x="991.0530313646636" y="-358.77502304436155"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="316.921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="10.926387131663148">6. Performance-Optimierung mit memo und useCallback

Viele Re-Render können Performance-Probleme verursachen.
Bad Practice: Unnötige Re-Render wegen neuer Funktion

function Parent() {
  const handleClick = () =&gt; console.log("Clicked!");
  return &lt;Child onClick={handleClick} /&gt;;
}

    ❌ Problem: handleClick wird bei jedem Render neu erstellt.

Best Practice: useCallback zur Memoization

import { useCallback } from "react";

function Parent() {
  const handleClick = useCallback(() =&gt; console.log("Clicked!"), []);
  return &lt;Child onClick={handleClick} /&gt;;
}

    ✅ Besser: useCallback verhindert unnötige Re-Render.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n15">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="95.94915022292867" width="600.0" x="1611.0530313646636" y="-237.36227352416273"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="90.796875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.5761376114643326">import { useCallback } from "react";

function Parent() {
  const handleClick = useCallback(() =&gt; console.log("Clicked!"), []);
  return &lt;Child onClick={handleClick} /&gt;;
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <edge id="e0" source="n1" target="n2">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="35.0" sy="-0.0" tx="-148.14731123217655" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e1" source="n0" target="n1">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="80.92378218652311" sy="-0.0" tx="-35.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e2" source="n2" target="n3">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="148.14731123217655" sy="-0.0" tx="-167.95542226363216" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e3" source="n4" target="n5">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e4" source="n3" target="n4">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="-5.0" tx="-300.0" ty="-0.0">
            <y:Point x="959.5530313646638" y="-1405.2718253968253"/>
            <y:Point x="959.5530313646638" y="-2306.9825396825395"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e5" source="n3" target="n6">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="-1.6666666666666679" tx="-300.0" ty="-0.0">
            <y:Point x="975.5530313646638" y="-1401.938492063492"/>
            <y:Point x="975.5530313646638" y="-1700.923015873016"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e6" source="n6" target="n7">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e7" source="n3" target="n9">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="-8.333333333333334" tx="-300.0" ty="-0.0">
            <y:Point x="943.5530313646638" y="-1408.6051587301586"/>
            <y:Point x="943.5530313646638" y="-2897.781349206349"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e8" source="n3" target="n12">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="1.6666666666666643" tx="-300.0" ty="-0.0">
            <y:Point x="975.5530313646638" y="-1398.6051587301586"/>
            <y:Point x="975.5530313646638" y="-1099.620634920635"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e9" source="n3" target="n11">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="4.9999999999999964" tx="-300.0" ty="-0.0">
            <y:Point x="959.5530313646638" y="-1395.2718253968253"/>
            <y:Point x="959.5530313646638" y="-587.561507936508"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e10" source="n9" target="n8">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e11" source="n12" target="n10">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e12" source="n11" target="n13">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e13" source="n3" target="n14">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="8.333333333333329" tx="-300.0" ty="-0.0">
            <y:Point x="943.5530313646638" y="-1391.938492063492"/>
            <y:Point x="943.5530313646638" y="-189.3876984126984"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e14" source="n14" target="n15">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
  </graph>
  <data key="d7">
    <y:Resources/>
  </data>
</graphml>
