<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:java="http://www.yworks.com/xml/yfiles-common/1.0/java" xmlns:sys="http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0" xmlns:x="http://www.yworks.com/xml/yfiles-common/markup/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yEd 3.21.1-->
  <key attr.name="Beschreibung" attr.type="string" for="graph" id="d0"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key for="graphml" id="d7" yfiles.type="resources"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
    <data key="d0"/>
    <node id="n0">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="161.84756437304623" x="0.0" y="-1243.9571428571428"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="161.84756437304623" x="4.0" xml:space="preserve" y="-0.06640625">Javascript</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n1">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="70.0" x="181.84756437304623" y="-1243.9571428571428"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="70.0" x="4.0" xml:space="preserve" y="-0.06640625">Praxis</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n2">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="231.0" x="271.8475643730462" y="-1243.9571428571428"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="231.0" x="4.0" xml:space="preserve" y="-0.06640625">2. Asynchrones JavaScript und APIs</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n3">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="298.0059693872315" x="522.8475643730462" y="-1243.9571428571428"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="298.0059693872315" x="4.0" xml:space="preserve" y="-0.06640625">Datenbanken: IndexedDB, LocalStorage, Firebase</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n4">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="888.9569768651526" width="600.0" x="855.8535337602775" y="-1678.4356312897191"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="882.234375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.3613009325763414">2. IndexedDB

IndexedDB ist eine asynchrone, NoSQL-Datenbank im Browser für größere Datenmengen.
❌ Bad Practice: Falsche Nutzung ohne Fehlerbehandlung

const dbRequest = indexedDB.open("myDatabase", 1);
dbRequest.onsuccess = function(event) {
    const db = event.target.result;
    const transaction = db.transaction("users", "readwrite"); // Fails if "users" store does not exist
    const store = transaction.objectStore("users");
    store.add({ id: 1, name: "Alice" });
};

Problem:

    Fehlende Fehlerbehandlung

    users-Store könnte nicht existieren

    Keine Prüfung, ob die Datenbank richtig initialisiert wurde

✅ Best Practice: Asynchrone Wartung mit Promises und Fehlerbehandlung

function openDatabase() {
    return new Promise((resolve, reject) =&gt; {
        const request = indexedDB.open("myDatabase", 1);

        request.onupgradeneeded = function(event) {
            const db = event.target.result;
            if (!db.objectStoreNames.contains("users")) {
                db.createObjectStore("users", { keyPath: "id" });
            }
        };

        request.onsuccess = function(event) {
            resolve(event.target.result);
        };

        request.onerror = function(event) {
            reject("Fehler beim Öffnen der Datenbank: " + event.target.error);
        };
    });
}

async function addUser(user) {
    const db = await openDatabase();
    const transaction = db.transaction("users", "readwrite");
    const store = transaction.objectStore("users");

    return new Promise((resolve, reject) =&gt; {
        const request = store.add(user);
        request.onsuccess = () =&gt; resolve("User hinzugefügt!");
        request.onerror = () =&gt; reject("Fehler beim Speichern.");
    });
}

addUser({ id: 1, name: "Alice" }).then(console.log).catch(console.error);

Vorteile:
✔ Fehlerhandling mit Promise
✔ Sicherstellung, dass ObjectStore existiert
✔ Vermeidung von Race Conditions</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n5">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="181.59283302940412" width="600.0" x="1475.8535337602775" y="-1324.7535593718449"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="175.59375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.9995415147020594">async function execute() {
    try {
        const data1 = await fetchData();
        const data2 = await processData(data1);
        await saveData(data2);
        console.log("Fertig!");
    } catch (error) {
        console.error("Fehler aufgetreten:", error);
    }
}

execute();</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n6">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="739.4779914732326" width="600.0" x="855.8535337602775" y="-759.4782814509019"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="726.7734375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.352276986616289">3. Firebase (Firestore)

Firestore ist eine NoSQL-Datenbank von Google für Echtzeit-Anwendungen.
❌ Bad Practice: Direkter Zugriff ohne Fehlerbehandlung

import { getFirestore, doc, setDoc } from "firebase/firestore"; 

const db = getFirestore();
setDoc(doc(db, "users", "user1"), { name: "Alice" });

Problem:

    Keine Fehlerbehandlung

    Kein async/await, was zu unkontrollierten Asynchronitäten führen kann

✅ Best Practice: Nutzung von try/catch und async/await

import { getFirestore, doc, setDoc, getDoc } from "firebase/firestore";

const db = getFirestore();

async function saveUser(id, userData) {
    try {
        await setDoc(doc(db, "users", id), userData);
        console.log("User erfolgreich gespeichert!");
    } catch (error) {
        console.error("Fehler beim Speichern des Users:", error);
    }
}

async function getUser(id) {
    try {
        const docRef = doc(db, "users", id);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            console.log("User gefunden:", docSnap.data());
        } else {
            console.log("Kein User gefunden.");
        }
    } catch (error) {
        console.error("Fehler beim Abrufen des Users:", error);
    }
}

saveUser("user1", { name: "Alice", age: 25 });
getUser("user1");

Vorteile:
✔ Fehlerbehandlung mit try/catch
✔ Verwendung von async/await für bessere Lesbarkeit</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n7">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="427.79134053773964" width="600.0" x="1475.8535337602775" y="-603.6349559831556"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="429.984375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="-1.0965172311301785">
import { getFirestore, doc, setDoc, getDoc } from "firebase/firestore";

const db = getFirestore();

async function saveUser(id, userData) {
    try {
        await setDoc(doc(db, "users", id), userData);
        console.log("User erfolgreich gespeichert!");
    } catch (error) {
        console.error("Fehler beim Speichern des Users:", error);
    }
}

async function getUser(id) {
    try {
        const docRef = doc(db, "users", id);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            console.log("User gefunden:", docSnap.data());
        } else {
            console.log("Kein User gefunden.");
        }
    } catch (error) {
        console.error("Fehler beim Abrufen des Users:", error);
    }
}

saveUser("user1", { name: "Alice", age: 25 });
getUser("user1");</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n8">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="131.0168466388609" width="600.0" x="1475.8535337602775" y="-1981.1635820495892"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="119.0625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.977173319430449">try {
    const user = { name: "Alice", age: 25 };
    localStorage.setItem("user", JSON.stringify(user)); // Speichert als JSON
    const storedUser = JSON.parse(localStorage.getItem("user")); // Konvertiert zurück
    console.log(storedUser);
} catch (error) {
    console.error("Fehler beim Zugriff auf LocalStorage:", error);
}</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n9">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="414.4389408231076" width="600.0" x="855.8535337602775" y="-2122.8746291417124"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="401.71875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.36009541155363">1. LocalStorage

LocalStorage ist eine synchrone API zur Speicherung kleinerer Datenmengen im Browser.
❌ Bad Practice: Synchrone Speicherung in LocalStorage (Blockiert den Hauptthread)

localStorage.setItem("username", "Alice");
console.log(localStorage.getItem("username"));

Problem:

    Blockiert den Hauptthread, da LocalStorage synchron arbeitet.

    Nicht für große Datenmengen geeignet.

✅ Best Practice: Nutzung von try/catch und JSON für komplexe Daten

try {
    const user = { name: "Alice", age: 25 };
    localStorage.setItem("user", JSON.stringify(user)); // Speichert als JSON
    const storedUser = JSON.parse(localStorage.getItem("user")); // Konvertiert zurück
    console.log(storedUser);
} catch (error) {
    console.error("Fehler beim Zugriff auf LocalStorage:", error);
}

Vorteile:
✔ Fehlerbehandlung mit try/catch
✔ Speichert Objekte als JSON</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <edge id="e0" source="n1" target="n2">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="35.0" sy="-0.0" tx="-115.5" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e1" source="n0" target="n1">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="80.92378218652311" sy="-0.0" tx="-35.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e2" source="n2" target="n3">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="115.5" sy="-0.0" tx="-149.00298469361576" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e3" source="n4" target="n5">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e4" source="n3" target="n4">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="149.00298469361576" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e5" source="n3" target="n6">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="149.00298469361576" sy="6.666666666666664" tx="-300.0" ty="-0.0">
            <y:Point x="840.3535337602776" y="-1227.290476190476"/>
            <y:Point x="840.3535337602776" y="-389.7392857142857"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e6" source="n6" target="n7">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e7" source="n3" target="n9">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="149.00298469361576" sy="-6.666666666666666" tx="-300.0" ty="-0.0">
            <y:Point x="840.3535337602776" y="-1240.6238095238095"/>
            <y:Point x="840.3535337602776" y="-1915.6551587301587"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e8" source="n9" target="n8">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
  </graph>
  <data key="d7">
    <y:Resources/>
  </data>
</graphml>
