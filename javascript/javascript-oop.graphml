<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:java="http://www.yworks.com/xml/yfiles-common/1.0/java" xmlns:sys="http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0" xmlns:x="http://www.yworks.com/xml/yfiles-common/markup/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yEd 3.21.1-->
  <key attr.name="Beschreibung" attr.type="string" for="graph" id="d0"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key for="graphml" id="d7" yfiles.type="resources"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
    <data key="d0"/>
    <node id="n0">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="161.84756437304623" x="0.0" y="-1556.9888888888888"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="161.84756437304623" x="4.0" xml:space="preserve" y="-0.06640625">Javascript</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n1">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="70.0" x="181.84756437304623" y="-1556.9888888888888"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="70.0" x="4.0" xml:space="preserve" y="-0.06640625">Praxis</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n2">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="296.2946224643531" x="271.8475643730462" y="-1556.9888888888888"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="296.2946224643531" x="4.0" xml:space="preserve" y="-0.06640625">3. Modularisierung und Programmierparadigmen</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n3">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="20.0" width="335.9108445272643" x="588.1421868373993" y="-1556.9888888888888"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="20.1328125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="335.9108445272643" x="4.0" xml:space="preserve" y="-0.06640625">Objektorientierte Programmierung (Klassen, Prototypen)</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n4">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="691.152783501721" width="600.0" x="975.0530313646636" y="-2570.327582227051"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="684.375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="3.3888917508606937">2. Vererbung in JavaScript (Prototypen)

In JavaScript gibt es kein klassisches Vererbungskonzept wie in anderen objektorientierten Sprachen. Stattdessen basiert die Vererbung auf Prototypen.
Beispiel: Vererbung mit Prototypen

// Elternklasse
class Tier {
    constructor(name) {
        this.name = name;
    }

    sprechen() {
        console.log(`${this.name} macht ein Geräusch.`);
    }
}

// Kindklasse
class Hund extends Tier {
    constructor(name, rasse) {
        super(name); // Aufruf des Konstruktors der Elternklasse
        this.rasse = rasse;
    }

    sprechen() {
        console.log(`${this.name} bellt.`);
    }
}

const meinHund = new Hund("Bello", "Dackel");
meinHund.sprechen(); // Ausgabe: Bello bellt.

Bad Practice:

    Vererbung ohne super: Wenn eine Kindklasse den Konstruktor der Elternklasse nicht richtig aufruft, kann das zu Fehlern führen.

// Bad Practice:
class Katze extends Tier {
    constructor(name) {
        this.name = name; // Fehler: "this" muss in der Subklasse nach "super()" verwendet werden.
    }
}

Best Practice:

    Verwende immer super(), wenn du den Konstruktor der Elternklasse aufrufen möchtest, um die richtige Initialisierung zu gewährleisten.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n5">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="364.19400482416313" width="600.0" x="1595.0530313646636" y="-2406.848192888272"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="359.3203125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.436846162081565">// Elternklasse
class Tier {
    constructor(name) {
        this.name = name;
    }

    sprechen() {
        console.log(`${this.name} macht ein Geräusch.`);
    }
}

// Kindklasse
class Hund extends Tier {
    constructor(name, rasse) {
        super(name); // Aufruf des Konstruktors der Elternklasse
        this.rasse = rasse;
    }

    sprechen() {
        console.log(`${this.name} bellt.`);
    }
}

const meinHund = new Hund("Bello", "Dackel");
meinHund.sprechen(); // Ausgabe: Bello bellt.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n6">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="604.3715297752726" width="600.0" x="975.0530313646636" y="-1849.1746537765248"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="599.578125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.3967023876361964">3. Prototypen-basierte Vererbung

JavaScript nutzt ein Prototypen-basierendes Erbschaftssystem, das eine andere Form der Vererbung als klassische OOP-Ansätze darstellt.
Beispiel: Vererbung via Prototypen

function Fahrzeug(name) {
    this.name = name;
}

Fahrzeug.prototype.fahren = function() {
    console.log(`${this.name} fährt.`);
};

function Auto(name, modell) {
    Fahrzeug.call(this, name); // Aufruf des Konstruktors der Elternklasse
    this.modell = modell;
}

// Vererbung der Methoden
Auto.prototype = Object.create(Fahrzeug.prototype);
Auto.prototype.constructor = Auto;

Auto.prototype.hupen = function() {
    console.log(`${this.name} hupt!`);
};

const meinAuto = new Auto("BMW", "X5");
meinAuto.fahren(); // Ausgabe: BMW fährt.
meinAuto.hupen();  // Ausgabe: BMW hupt!

Bad Practice:

    Direktes Überschreiben von prototype ohne korrekte Rückverbindung zum Konstruktor:

// Bad Practice:
Auto.prototype = {}; // Dies entfernt die Verbindung zu Fahrzeug.prototype

Best Practice:

    Benutze Object.create() zur korrekten Vererbung, um die Vererbungshierarchie beizubehalten und den Konstruktor zu verknüpfen.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n7">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="355.13903690534494" width="600.0" x="1595.0530313646636" y="-1724.5584073415616"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="345.1875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.9757684526725825">function Fahrzeug(name) {
    this.name = name;
}

Fahrzeug.prototype.fahren = function() {
    console.log(`${this.name} fährt.`);
};

function Auto(name, modell) {
    Fahrzeug.call(this, name); // Aufruf des Konstruktors der Elternklasse
    this.modell = modell;
}

// Vererbung der Methoden
Auto.prototype = Object.create(Fahrzeug.prototype);
Auto.prototype.constructor = Auto;

Auto.prototype.hupen = function() {
    console.log(`${this.name} hupt!`);
};

const meinAuto = new Auto("BMW", "X5");
meinAuto.fahren(); // Ausgabe: BMW fährt.
meinAuto.hupen();  // Ausgabe: BMW hupt!</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n8">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="223.39753791061912" width="600.0" x="1595.0530313646636" y="-2966.6559118124533"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="217.9921875" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="2.702675205309788">class Person {
    constructor(name, alter) {
        this.name = name;
        this.alter = alter;
    }

    // Methode
    vorstellen() {
        console.log(`Hallo, mein Name ist ${this.name} und ich bin ${this.alter} Jahre alt.`);
    }
}

// Instanziierung
const person1 = new Person("Max", 30);
person1.vorstellen(); // Ausgabe: Hallo, mein Name ist Max und ich bin 30 Jahre alt.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n9">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="509.25857554603374" width="600.0" x="975.0530313646636" y="-3109.58643063016"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="486.515625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="11.37147527301704">. Klassen in JavaScript (ES6 Syntax)

In JavaScript können Klassen seit ECMAScript 6 (ES6) auf eine strukturierte Weise definiert werden. Hier ist ein einfaches Beispiel:
Beispiel: Klasse mit Konstruktor

class Person {
    constructor(name, alter) {
        this.name = name;
        this.alter = alter;
    }

    // Methode
    vorstellen() {
        console.log(`Hallo, mein Name ist ${this.name} und ich bin ${this.alter} Jahre alt.`);
    }
}

// Instanziierung
const person1 = new Person("Max", 30);
person1.vorstellen(); // Ausgabe: Hallo, mein Name ist Max und ich bin 30 Jahre alt.

Bad Practice:

    Konstruktor ohne new verwenden: In JavaScript muss der Konstruktor mit new aufgerufen werden, um eine Instanz der Klasse zu erstellen. Ohne new wird kein Objekt erzeugt, was zu unerwartetem Verhalten führt.

// Bad Practice:
const person2 = Person("Max", 30); // Dies funktioniert nicht korrekt!

Best Practice:

    Verwende immer den new-Operator, um Instanzen zu erstellen.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n10">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="622.8410087513236" width="600.0" x="975.0530313646636" y="-1214.8030440582013"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="613.7109375" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="4.5650356256617215">4. Getter und Setter

Getter und Setter ermöglichen es, auf private Daten einer Klasse zuzugreifen und diese zu ändern, ohne diese direkt zu manipulieren.
Beispiel: Getter und Setter

class Auto {
    constructor(marke) {
        this._marke = marke; // private Variable
    }

    // Getter
    get marke() {
        return this._marke;
    }

    // Setter
    set marke(value) {
        if(value.length &gt; 3) {
            this._marke = value;
        } else {
            console.log("Markenname zu kurz!");
        }
    }
}

const meinAuto = new Auto("BMW");
console.log(meinAuto.marke); // Ausgabe: BMW
meinAuto.marke = "Audi";  // Marke ändern
console.log(meinAuto.marke); // Ausgabe: Audi
meinAuto.marke = "Fi";    // Fehler: Markenname zu kurz!

Bad Practice:

    Verwendung von direkten Variablen zuzüglich Setter/Getter:

// Bad Practice:
const auto = new Auto("BMW");
auto._marke = "Mercedes"; // Direkter Zugriff auf private Variable (nicht empfohlen)

Best Practice:

    Verwende immer Getter und Setter, um den Zugriff auf private Variablen zu kontrollieren.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n11">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="541.9618054862984" width="600.0" x="975.0530313646636" y="-561.9618551241016"/>
          <y:Fill color="#E8EEF7" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="528.9140625" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="6.523871493149159">5. Modularisierung

JavaScript-Module ermöglichen es, Code in separate, wiederverwendbare Einheiten zu unterteilen, die dann in anderen Modulen importiert werden können. Dies verbessert die Wartbarkeit und Wiederverwendbarkeit des Codes.
Beispiel: Module mit ES6-Import/Export

// in person.js
export class Person {
    constructor(name) {
        this.name = name;
    }

    vorstellen() {
        console.log(`Hallo, ich heiße ${this.name}`);
    }
}

// in main.js
import { Person } from './person.js';

const person = new Person("Max");
person.vorstellen(); // Ausgabe: Hallo, ich heiße Max

Bad Practice:

    Verwendung von globalen Variablen: Wenn du globale Variablen oder Funktionen verwendest, anstatt die Modularisierungsfunktionen von ES6 zu nutzen, riskierst du Namenskonflikte und das Überschreiben von Variablen.

// Bad Practice:
var person = new Person("Max"); // globale Variable

Best Practice:

    Nutze import und export zur Trennung von Logik in Module, um so Namenskonflikte zu vermeiden und die Wartbarkeit zu verbessern.</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n12">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="370.91795130082835" width="600.0" x="1595.0530313646636" y="-1088.841515332954"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="359.3203125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="5.7988194004142315">class Auto {
    constructor(marke) {
        this._marke = marke; // private Variable
    }

    // Getter
    get marke() {
        return this._marke;
    }

    // Setter
    set marke(value) {
        if(value.length &gt; 3) {
            this._marke = value;
        } else {
            console.log("Markenname zu kurz!");
        }
    }
}

const meinAuto = new Auto("BMW");
console.log(meinAuto.marke); // Ausgabe: BMW
meinAuto.marke = "Audi";  // Marke ändern
console.log(meinAuto.marke); // Ausgabe: Audi
meinAuto.marke = "Fi";    // Fehler: Markenname zu kurz!</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <node id="n13">
      <data key="d6">
        <y:GenericNode configuration="com.yworks.flowchart.process">
          <y:Geometry height="253.1829746576061" width="600.0" x="1595.0530313646636" y="-417.57243970975543"/>
          <y:Fill color="#FF99CC" color2="#B7C9E3" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="node_width" configuration="CroppingLabel" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="232.125" horizontalTextPosition="center" iconTextGap="4" modelName="internal" modelPosition="l" textColor="#000000" verticalTextPosition="bottom" visible="true" width="600.0" x="4.0" xml:space="preserve" y="10.528987328803055">// in person.js
export class Person {
    constructor(name) {
        this.name = name;
    }

    vorstellen() {
        console.log(`Hallo, ich heiße ${this.name}`);
    }
}

// in main.js
import { Person } from './person.js';

const person = new Person("Max");
person.vorstellen(); // Ausgabe: Hallo, ich heiße Max</y:NodeLabel>
        </y:GenericNode>
      </data>
    </node>
    <edge id="e0" source="n1" target="n2">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="35.0" sy="-0.0" tx="-148.14731123217655" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e1" source="n0" target="n1">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="80.92378218652311" sy="-0.0" tx="-35.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e2" source="n2" target="n3">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="148.14731123217655" sy="-0.0" tx="-167.95542226363216" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e3" source="n4" target="n5">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e4" source="n3" target="n4">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="-4.0" tx="-300.0" ty="-0.0">
            <y:Point x="959.5530313646636" y="-1550.9888888888888"/>
            <y:Point x="959.5530313646636" y="-2224.7511904761905"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e5" source="n3" target="n6">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e6" source="n6" target="n7">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e7" source="n3" target="n9">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="-8.0" tx="-300.0" ty="-0.0">
            <y:Point x="943.5530313646636" y="-1554.9888888888888"/>
            <y:Point x="943.5530313646636" y="-2854.957142857143"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e8" source="n3" target="n10">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="4.0" tx="-300.0" ty="-0.0">
            <y:Point x="959.5530313646636" y="-1542.9888888888888"/>
            <y:Point x="959.5530313646636" y="-903.3825396825396"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e9" source="n3" target="n11">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="167.95542226363216" sy="8.0" tx="-300.0" ty="-0.0">
            <y:Point x="943.5530313646636" y="-1538.9888888888888"/>
            <y:Point x="943.5530313646636" y="-290.9809523809524"/>
          </y:Path>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e10" source="n9" target="n8">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e11" source="n10" target="n12">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e12" source="n11" target="n13">
      <data key="d9"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="300.0" sy="-0.0" tx="-300.0" ty="-0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
  </graph>
  <data key="d7">
    <y:Resources/>
  </data>
</graphml>
